services:
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - 5672:5672 # for sender and consumer connections
      - 15672:15672 # for serve RabbitMQ GUI
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    labels:
      reproxy.port: 15672

  zima:
    build: .
    container_name: zima
    ports:
      - ${PORT}:${PORT}
    expose:
      - ${PORT}
    environment:
      PORT: ${PORT}
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      AMQP_FORMS_QUEUE_NAME: ${AMQP_FORMS_QUEUE_NAME}
    restart: unless-stopped
    depends_on:
      - message-broker
    labels:
      reproxy.server: '*'
      reproxy.route: '^/(.*)'
      reproxy.dest: '/$$1'

  meetings-service:
    build:
      context: ./microservices/meeting-service
      dockerfile: Dockerfile
    container_name: meetings-service
    volumes:
      - ./microservices/meeting-service/credentials.json:/app/credentials.json
      - ./microservices/meeting-service/token.json:/app/token.json
    environment:
      AMQP_MEETINGS_QUEUE_NAME: ${AMQP_MEETINGS_QUEUE_NAME}
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
    restart: unless-stopped
    depends_on:
      - message-broker
    labels:
      reproxy.enabled: 0

  spotify-service:
    build:
      context: .
      dockerfile: microservices/spotify-service/Dockerfile
    container_name: spotify-service
    hostname: spotify-service
    volumes:
      - ./microservices/spotify-service/auth.json:/app/auth.json
    environment:
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      AMQP_SPOTIFY_QUEUE_NAME: ${AMQP_SPOTIFY_QUEUE_NAME}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
    restart: unless-stopped
    depends_on:
      - message-broker
    expose:
      - 3000

  smart-devices-service:
    build:
      context: .
      dockerfile: microservices/smart-devices-service/Dockerfile
    container_name: smart-devices-service
    hostname: smart-devices-service
    volumes:
      - ./microservices/smart-devices-service/devices.json:/usr/src/app/microservices/smart-devices-service/devices.json
    environment:
      AMQP_SERVER_URL: ${HOST_AMQP_SERVER_URL}
      AMQP_SMART_DEVICES_QUEUE_NAME: ${AMQP_SMART_DEVICES_QUEUE_NAME}
      ATV_ID: ${ATV_ID}
      ATV_COMPANION_CREDENTIALS: ${ATV_COMPANION_CREDENTIALS}
    network_mode: host
    restart: unless-stopped
    depends_on:
      - message-broker
    labels:
      reproxy.enabled: 0

  ansible-service:
    build:
      context: .
      dockerfile: microservices/ansible-service/Dockerfile
      args:
        SSH_HOST: ${SSH_HOST}
        SSH_USER: ${SSH_USER}
        SSHPASS: ${SSH_PASS}
    container_name: ansible-service
    hostname: ansible-service
    volumes:
      - ./microservices/ansible-service/ansible/playbooks:/usr/src/app/microservices/ansible-service/ansible/playbooks
      - ${LOCAL_VPN_FILES_PATH}:${VPN_FILES_PATH}
    environment:
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      AMQP_ANSIBLE_QUEUE_NAME: ${AMQP_ANSIBLE_QUEUE_NAME}
      PLAYBOOKS_DIR: ${PLAYBOOKS_DIR}
      VPN_FILES_PATH: ${VPN_FILES_PATH}
      SSH_USER: ${SSH_USER}
    restart: unless-stopped
    depends_on:
      - message-broker
    labels:
      reproxy.enabled: 0

  reproxy:
    image: umputun/reproxy:master
    container_name: zima-api
    hostname: reproxy
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=Europe/Warsaw
      - LISTEN=0.0.0.0:8080
      - DOCKER_ENABLED=true
      - DOCKER_AUTO=true
      - DEBUG=true
      - TIMEOUT_RESP_HEADER=640s
      - TIMEOUT_WRITE=640s
      - TIMEOUT_IDLE=640s
      - TIMEOUT_DIAL=640s
      - TIMEOUT_KEEP_ALIVE=640s
      - MAX_SIZE=0
    restart: unless-stopped
    depends_on:
      - message-broker
      - meetings-service
      - zima

  forms-db:
    image: mongo:4.4-bionic
    container_name: forms-db
    restart: unless-stopped
    command: mongod --serviceExecutor adaptive
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB}
    volumes:
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
      - formsdbdata:/data/db
    labels:
      reproxy.enabled: no

  forms-service:
    build:
      context: .
      dockerfile: microservices/forms-service/Dockerfile
    container_name: forms-service
    hostname: forms-service
    environment:
      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
      AMQP_ANSIBLE_QUEUE_NAME: ${AMQP_ANSIBLE_QUEUE_NAME}
      AMQP_MEETINGS_QUEUE_NAME: ${AMQP_MEETINGS_QUEUE_NAME}
      AMQP_SMART_DEVICES_QUEUE_NAME: ${AMQP_SMART_DEVICES_QUEUE_NAME}
      AMQP_SPOTIFY_QUEUE_NAME: ${AMQP_SPOTIFY_QUEUE_NAME}
      AMQP_FORMS_QUEUE_NAME: ${AMQP_FORMS_QUEUE_NAME}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DB: ${MONGO_DB}
    restart: unless-stopped
    depends_on:
      - message-broker
      - forms-db
    labels:
      reproxy.enabled: no

volumes:
  formsdbdata:
