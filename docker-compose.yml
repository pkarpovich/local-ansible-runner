services:
  discovery-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/discovery-service
    container_name: discovery-service
    hostname: discovery-service
    environment:
      HTTP_PORT: 3000
    restart: unless-stopped
    ports:
      - 8080:3000
    expose:
      - 3000
    networks:
#      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.zima-discovery.rule=Host(`zima.${DOMAIN}`)"
      - "traefik.http.routers.zima-discovery.entrypoints=http"

  spotify-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/spotify-service
    container_name: spotify-service
    hostname: spotify-service
    volumes:
      - ./packages/spotify-service/db:/app/db
    environment:
      HTTP_PORT: 3000
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
      AUTH_DB_PATH: /app/db/auth.json
      DISCOVERY_NAME: spotify-service
      DISCOVERY_ADDRESS: http://spotify-service:3000/commands/execute
      DISCOVERY_SERVER_ADDRESS: http://discovery-service:3000/discovery/register
    restart: unless-stopped
    depends_on:
      - discovery-service
    expose:
      - 3000
    networks:
#      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.zima-spotify.rule=PathPrefix(`/zima-spotify`)"
      - "traefik.http.routers.zima-spotify.entrypoints=http"
      - "traefik.http.middlewares.zima-spotify-strip.stripprefix.prefixes=/zima-spotify"
      - "traefik.http.routers.zima-spotify.middlewares=zima-spotify-strip"

  smart-devices-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/smart-devices-service
    container_name: smart-devices-service
    hostname: smart-devices-service
    volumes:
      - ./packages/smart-devices-service/devices.json:/usr/src/app/packages/devices.json
#      - persist-homekit:/usr/src/app/packages/smart-devices-service/persist
    environment:
      PORT: 3000
      DISCOVERY_NAME: smart-devices-service
      DISCOVERY_ADDRESS: http://smart-devices-service:3000/commands/execute
      DISCOVERY_SERVER_ADDRESS: http://discovery-service:3000/discovery/register
    networks:
#      - proxy
      - default
      - homekit
    depends_on:
      - discovery-service
    restart: unless-stopped

#  ansible-service:
#    build:
#      context: .
#      dockerfile: packages/ansible-service/Dockerfile
#      args:
#        SERVICE_PATH: packages/ansible-service
#        SSH_HOST: ${SSH_HOST}
#        SSH_USER: ${SSH_USER}
#        SSHPASS: ${SSH_PASS}
#    container_name: ansible-service
#    hostname: ansible-service
#    volumes:
#      - ./packages/ansible-service/ansible/playbooks:/usr/src/app/packages/ansible-service/ansible/playbooks
#      - ${LOCAL_VPN_FILES_PATH}:${VPN_FILES_PATH}
#    environment:
#      AMQP_SERVER_URL: ${AMQP_SERVER_URL}
#      AMQP_ANSIBLE_QUEUE_NAME: ${AMQP_ANSIBLE_QUEUE_NAME}
#      PLAYBOOKS_DIR: ${PLAYBOOKS_DIR}
#      VPN_FILES_PATH: ${VPN_FILES_PATH}
#      SSH_USER: ${SSH_USER}
#      SSH_HOST: ${SSH_HOST}
#    restart: unless-stopped
#    depends_on:
#      - message-broker

volumes:
  persist-homekit:

networks:
  homekit:
    driver: macvlan
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: 192.168.198.0/24
          gateway: 192.168.198.1
          ip_range: 192.168.198.16/32

#networks:
#  proxy:
#    external: true