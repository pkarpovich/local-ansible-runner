services:
  discovery-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/discovery-service
    container_name: discovery-service
    hostname: discovery-service
    environment:
      HTTP_PORT: 3000
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.zima-controller.rule=PathPrefix(`/zima-controller`)"
      - "traefik.http.routers.zima-controller.entrypoints=http"
      - "traefik.http.middlewares.zima-controller-strip.stripprefix.prefixes=/zima-controller/"
      - "traefik.http.routers.zima-controller.middlewares=zima-controller-strip"

  spotify-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/spotify-service
    container_name: spotify-service
    hostname: spotify-service
    volumes:
      - ./packages/spotify-service/db:/app/db
    environment:
      HTTP_PORT: 3000
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
      AUTH_DB_PATH: /app/db/auth.json
      DISCOVERY_NAME: spotify-service
      DISCOVERY_ADDRESS: http://spotify-service:3000/commands/execute
      DISCOVERY_SERVER_ADDRESS: http://discovery-service:3000/discovery/register
    restart: unless-stopped
    depends_on:
      - discovery-service
    expose:
      - 3000
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.zima-spotify.entrypoints=http"
      - "traefik.http.routers.zima-spotify.rule=PathPrefix(`/zima-spotify`)"
      - "traefik.http.middlewares.zima-spotify-strip.stripprefix.prefixes=/zima-spotify"
      - "traefik.http.routers.zima-spotify.middlewares=zima-spotify-strip"

  smart-devices-service:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        SERVICE_PATH: packages/smart-devices-service
    container_name: smart-devices-service
    hostname: smart-devices-service
    volumes:
      - ./packages/smart-devices-service/devices.json:/usr/src/app/packages/devices.json
      - persist-homekit:/usr/src/app/packages/smart-devices-service/persist
    environment:
      PORT: 3000
      DISCOVERY_NAME: smart-devices-service
      DISCOVERY_ADDRESS: http://smart-devices-service:3000/commands/execute
      DISCOVERY_SERVER_ADDRESS: http://discovery-service:3000/discovery/register
    networks:
      - default
      - homekit
    depends_on:
      - discovery-service
    restart: unless-stopped

  remote-shell-service:
    build:
      context: .
      dockerfile: packages/remote-shell-service/Dockerfile
      args:
        SERVICE_PATH: packages/remote-shell-service
        SSH_HOST: ${SSH_HOST}
        SSH_USER: ${SSH_USER}
        SSHPASS: ${SSH_PASS}
    container_name: remote-shell-service
    hostname: remote-shell-service
    environment:
      SSH_USER: ${SSH_USER}
      SSH_HOST: ${SSH_HOST}
      PORT: 3000
      DISCOVERY_NAME: remote-shell-service
      DISCOVERY_ADDRESS: http://remote-shell-service:3000/commands/execute
      DISCOVERY_SERVER_ADDRESS: http://discovery-service:3000/discovery/register
      ATV_ID: ${ATV_ID}
      ATV_COMPANION_CREDENTIALS: ${ATV_COMPANION_CREDENTIALS}
    networks:
      - default
    restart: unless-stopped
    depends_on:
      - discovery-service

volumes:
  persist-homekit:

networks:
  homekit:
    external: true
  proxy:
    external: true